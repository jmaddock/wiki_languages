import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import argparse

# list of languages to include in plot
HIGHLIGHTED_LANG_LIST = ['fa','pt','he']

def read_file(infile):
    # read a csv with percent change due to language
    df = pd.read_table('/srv/wiki_language_data/stata_files/talk_article_lang_model_percents.tsv',
                       header=1,
                       index_col=0,na_values='.')
    # reformat the dataframe
    df = df.reset_index().rename(columns={'index':'label'})
    # remove all rows not in HIGHLIGHTED_LANG_LIST
    plot_df = df.loc[df['label'].isin(HIGHLIGHTED_LANG_LIST)][['label','%']]
    # add a point for EN
    plot_df = plot_df.append(pd.DataFrame([{'label':'en',
                                            '%':0}]))
    return plot_df

def plot_figure(plot_df):
    # define the size of the figure
    fig = plt.figure(figsize=(7,1.5))
    # iterate through each row in the dataframe and ggplot colors
    for i,c in zip(range(len(plot_df)),plt.rcParams['axes.prop_cycle']):
        # plot each point
        plt.plot(plot_df.iloc[[i]]['%'],
                 0,
                 '.',
                 markersize=25,
                 c=c['color'])
    # plot the 1d scale
    plt.errorbar(x=0,
                 y=0,
                 xerr=[75],
                 lw=1,
                 ecolor='gray',
                 fmt='none')
    # remove the y axis from the graph
    plt.tick_params(axis='y',
                    which='both',
                    right='off',
                    left='off',
                    labelleft='off')
    # add x axis ticks at every 25%
    plt.xticks(np.arange(start=-75,stop=80,step=25))
    # set the borders of the graph
    plt.ylim(-10, 10)
    plt.xlim(-85, 85)
    # label the x axis
    plt.xlabel('Percent Change Compared to English')
    plt.tight_layout()
    return fig

def main():
    parser = argparse.ArgumentParser(description='process wiki data')
    parser.add_argument('-i', '--infile',
                        required=True,
                        help='path to a coefficient .tsv generated by STATA listcoef')
    parser.add_argument('-o', '--outfile',
                        help='path to .pdf of the graph')
    parser.add_argument('--show_graph',
                        action='store_true',
                        help='flag to plot graph in new window')
    args = parser.parse_args()
    plot_df = read_file(args.infile)
    fig = plot_figure(plot_df)
    if args.outfile:
        fig.savefig(args.outfile)
    if args.show_graph:
        plt.show()
