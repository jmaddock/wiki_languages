import pandas as pd
import argparse
import matplotlib.pyplot as plt
import matplotlib
from ggplot import *

matplotlib.style.use('ggplot')

## Graph the factor or percent change specified by each coeficient
## INFILE: path to a coefficient .tsv generated by STATA listcoef
## OUTFILE: path to .pdf of the graph
## COEF_LABELS: path to a coefficient .tsv generated by STATA listcoef
## GROUP BY: path to a .csv file with 2 columns, lang and order by
def graph_coefs(infile,coef_lables,group_by):
    df = pd.read_table(infile,header=1,index_col=0,na_values='.')
    labels = pd.read_table(coef_lables,header=1,index_col=None,na_values='.')
    labels = labels.rename(columns={'Unnamed: 0':'vars'})
    labels = labels.loc[labels['vars'].str.len() == 2]
    df = df.transpose()
    df = df.reset_index(level=0)
    df = df.rename(columns={'index':'vars'})
    df = df.loc[df['vars'].str[-5:] == 'lang2']
    df = df.merge(labels,on='b')
    df = df.rename(columns={'vars_y':'lang'})
    df = _group_by(df,'b',group_by)
    ul = df['ul'].subtract(df['b']).values
    ll = df['b'].subtract(df['ll']).values
    errors = [ll,ul]
    ax = df.plot(x='lang',
                 y='b',
                 yerr=errors,
                 kind='geom_point',
                 legend=False,)
    ax.set_xlabel("Coefficient Value")
    ax.set_ylabel("Language")
    fig = ax.get_figure()
    return fig

## Graph the factor or percent change specified by each coeficient
## INFILE: path to a coefficient .tsv generated by STATA listcoef
## OUTFILE: path to .pdf of the graph
## COEF_TYPE: percent or factor
## GROUP BY: a .csv file with 2 columns, lang and order by
def graph_margins(infile,coef_type,group_by=None):
    df = pd.read_table(infile,header=1,index_col=0,na_values='.')
    df = df.reset_index(level=0)
    df = df.rename(columns={'index':'vars'})
    if coef_type == 'percent':
        y_column = '%'
        title = 'Percent Increase in Talk Page Edits Predicted By Language'
        ylabel = 'Percent Increase'
    elif coef_type == 'factor':
        y_column = 'e^b'
        title = 'Factor Increase in Talk Page Edits Predicted By Language'
        ylabel = 'Factor Increase Predicted By Language'
    df = df.loc[df['vars'].str.len() == 2]
    df = _group_by(df,y_column,group_by)
    ax = df.plot(x='vars',
                 y=y_column,
                 kind='bar',
                 legend=False,
                 title=None,
                 figsize=(7,3))
    ax.set_ylabel(ylabel)
    ax.set_xlabel("Language")
    fig = ax.get_figure()
    return fig

def _group_by(df,column=None,infile=None):
    if infile:
        ordered_df = pd.read_csv(infile,index_col=None)
        df = df.merge(ordered_df,on='lang')
        df = df.sort_values('order_by') # fix this
    elif column:
        df = df.sort_values(column)
    else:
        return None
    return df
    
def main():
    parser = argparse.ArgumentParser(description='process wiki data')
    parser.add_argument('-i','--infile',
                        required=True,
                        help='path to a coefficient .tsv generated by STATA listcoef')
    parser.add_argument('-o','--outfile',
                        help='path to .pdf of the graph')
    parser.add_argument('-c','--coef_type',
                        required=True,
                        choices=['percent','factor','coefs'],
                        help='type of coefficient graphed (percent, factor, or raw coefs w/ error bars)')
    parser.add_argument('-l','--coef_labels',
                        help='path to a coefficient .tsv generated by STATA listcoef.  use with --coef_type = coefs')
    parser.add_argument('-b','--group_by',
                        help='path to a .csv file with 2 columns, lang and order by')
    parser.add_argument('--show_graph',
                        action='store_true',
                        help='flag to plot graph in new window')
    args = parser.parse_args()
    if args.coef_type == 'coefs':
        fig = graph_coefs(args.infile,args.coef_labels,args.group_by)
    else:
        fig = graph_margins(args.infile,args.coef_type,args.group_by)
    if args.outfile:
        fig.savefig(args.outfile)
    if args.show_graph:
        plt.show()
        
    
if __name__ == "__main__":
    main()
